import{J as c,r as n}from"#entry";const f=c("form",()=>{const t=n(null),s=n({});return{schema:t,formData:s,resetData:()=>{t.value=null,s.value={}}}}),p=t=>{if(!Array.isArray(t.items))return t;const s={};for(const e of t.items||[]){const o=(e?.name||"").trim();if(!o)continue;let l,r=e?.visibleRaw?.toString?.().trim?.()||"";if(!r){const i=e?.visible;i!=null&&(r=typeof i=="object"?JSON.stringify(i):String(i))}if(r)if(r.startsWith("{"))try{l=JSON.parse(r)}catch{l=r}else l=r;const u=e?.type==="Number",a=e?.prefillValue,m=a!==void 0&&a!==""?{value:u&&!Number.isNaN(Number(a))?Number(a):a}:void 0;s[o]={name:o,display:{...e?.display||{}},required:!!e?.required,rules:e?.rules||void 0,type:e?.type,enum:e?.type==="Radio"||e?.type==="Select"?(e?.enum||[]).filter(i=>i?.label||i?.value):void 0,value_constraints:e?.type==="Number"?e?.value_constraints||{}:void 0,visible:l,prefill:m}}return{name:t.name,label:t.label,endpoint:t.endpoint,items:s}};export{p as c,f as u};
